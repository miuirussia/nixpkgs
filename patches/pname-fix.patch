diff --git a/pkgs/build-support/rust/import-cargo-lock.nix b/pkgs/build-support/rust/import-cargo-lock.nix
index fd360874..9e1cbb0f 100644
--- a/pkgs/build-support/rust/import-cargo-lock.nix
+++ b/pkgs/build-support/rust/import-cargo-lock.nix
@@ -53,7 +53,7 @@ let
   );
 
   nameGitSha = pkg: let gitParts = parseGit pkg.source; in {
-    name = "${pkg.name}-${pkg.version}";
+    name = "${pkg.pname or pkg.name}-${pkg.version}";
     value = gitParts.sha;
   };
 
@@ -77,15 +77,15 @@ let
   # recursive hash of the unpacked crate.
   fetchCrate = pkg:
     assert lib.assertMsg (pkg ? checksum) ''
-      Package ${pkg.name} does not have a checksum.
+      Package ${pkg.pname or pkg.name} does not have a checksum.
       Please note that the Cargo.lock format where checksums used to be listed
       under [metadata] is not supported.
       If that is the case, running `cargo update` with a recent toolchain will
       automatically update the format along with the crate's depenendencies.
     '';
     fetchurl {
-      name = "crate-${pkg.name}-${pkg.version}.tar.gz";
-      url = "https://crates.io/api/v1/crates/${pkg.name}/${pkg.version}/download";
+      name = "crate-${pkg.pname or pkg.name}-${pkg.version}.tar.gz";
+      url = "https://crates.io/api/v1/crates/${pkg.pname or pkg.name}/${pkg.version}/download";
       sha256 = pkg.checksum;
     };
 
@@ -97,7 +97,7 @@ let
       if pkg.source == "registry+https://github.com/rust-lang/crates.io-index" then
       let
         crateTarball = fetchCrate pkg;
-      in runCommand "${pkg.name}-${pkg.version}" {} ''
+      in runCommand "${pkg.pname or pkg.name}-${pkg.version}" {} ''
         mkdir $out
         tar xf "${crateTarball}" -C $out --strip-components=1
 
@@ -107,11 +107,11 @@ let
       else if gitParts != null then
       let
         missingHash = throw ''
-          No hash was found while vendoring the git dependency ${pkg.name}-${pkg.version}. You can add
+          No hash was found while vendoring the git dependency ${pkg.pname or pkg.name}-${pkg.version}. You can add
           a hash through the `outputHashes` argument of `importCargoLock`:
 
           outputHashes = {
-            "${pkg.name}-${pkg.version}" = "<hash>";
+            "${pkg.pname or pkg.name}-${pkg.version}" = "<hash>";
           };
 
           If you use `buildRustPackage`, you can add this attribute to the `cargoLock`
@@ -123,31 +123,31 @@ let
           inherit (gitParts) url;
           rev = gitParts.sha; # The commit SHA is always available.
         };
-      in runCommand "${pkg.name}-${pkg.version}" {} ''
+      in runCommand "${pkg.pname or pkg.name}-${pkg.version}" {} ''
         tree=${tree}
 
         # If the target package is in a workspace, or if it's the top-level
         # crate, we should find the crate path using `cargo metadata`.
         crateCargoTOML=$(${cargo}/bin/cargo metadata --format-version 1 --no-deps --manifest-path $tree/Cargo.toml | \
-          ${jq}/bin/jq -r '.packages[] | select(.name == "${pkg.name}") | .manifest_path')
+          ${jq}/bin/jq -r '.packages[] | select(.name == "${pkg.pname or pkg.name}") | .manifest_path')
 
         # If the repository is not a workspace the package might be in a subdirectory.
         if [[ -z $crateCargoTOML ]]; then
           for manifest in $(find $tree -name "Cargo.toml"); do
             echo Looking at $manifest
-            crateCargoTOML=$(${cargo}/bin/cargo metadata --format-version 1 --no-deps --manifest-path "$manifest" | ${jq}/bin/jq -r '.packages[] | select(.name == "${pkg.name}") | .manifest_path' || :)
+            crateCargoTOML=$(${cargo}/bin/cargo metadata --format-version 1 --no-deps --manifest-path "$manifest" | ${jq}/bin/jq -r '.packages[] | select(.name == "${pkg.pname or pkg.name}") | .manifest_path' || :)
             if [[ ! -z $crateCargoTOML ]]; then
               break
             fi
           done
 
           if [[ -z $crateCargoTOML ]]; then
-            >&2 echo "Cannot find path for crate '${pkg.name}-${pkg.version}' in the tree in: $tree"
+            >&2 echo "Cannot find path for crate '${pkg.pname or pkg.name}-${pkg.version}' in the tree in: $tree"
             exit 1
           fi
         fi
 
-        echo Found crate ${pkg.name} at $crateCargoTOML
+        echo Found crate ${pkg.pname or pkg.name} at $crateCargoTOML
         tree=$(dirname $crateCargoTOML)
 
         cp -prvd "$tree/" $out
